# -*- coding: utf-8 -*-
"""APS 1 - Algoritmo SVM - Davi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cVcl8JbwfJ9Cv110Fbou1FeUIK29t80Q

# Importando Bibliotecas
"""

import numpy as np
import pandas as pd
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score
import matplotlib.pyplot as plt
import seaborn as sns
plt.style.use('ggplot')

"""# Carregando DataFrame"""

url='https://drive.google.com/file/d/1RvWYgF6ugC39ijDHca84NNoX-cQKOBYp/view?usp=share_link'
url='https://drive.google.com/uc?id=' + url.split('/')[-2]
df = pd.read_csv(url,index_col=0)
df

"""# Análise Exploratória dos Dados"""

# Verificando o cabeçalho do dataset (primeiras 5 linhas)
df.head()

# Verificando o rodapé do dataset (últimas 5 linhas)
df.tail()

# Verificando o formato do dataset (número de linhas e colunas)
df.shape

# Verificando o tipo das features
df.dtypes

# Verificando se existem valores nulos
df.isnull().sum()

# Verificando se existem linhas duplicadas
df.duplicated().sum()

# Descrição do dataframe
df.describe()

# Análise de correlação entre features
corr = df.corr()
corr.style.background_gradient(cmap='PuBu')

# Verificando a porcentagem (%) dos valores da coluna 'Resultado'
df['Outcome'].value_counts()/df.shape[0]

# Contando linhas por resultado para ver o mapeamento
df.groupby(['Outcome']).count()

"""## Plotando os gráficos das colunas com maior correlação com a coluna 'Resultado' """

plt.boxplot(df['Glucose'])
plt.ylabel('Valores')
plt.xlabel('Glucose')
plt.show()

plt.boxplot(df['BMI'])
plt.ylabel('Valores')
plt.xlabel('BMI')
plt.show()

plt.boxplot(df['Age'])
plt.ylabel('Valores')
plt.xlabel('Age')
plt.show()

# Plotando pairplot usando a biblioteca seaborn
sns.pairplot(df)

"""# Treinando o Modelo"""

# Dividindo dataframe entre X e y
X = df.drop(columns=['Outcome'])
y = df['Outcome']

# Dividindo dados para treino e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Criando uma instância da classe SVC
svm_model = SVC()

# Treinando o modelo com os dados de treino
svm_model.fit(X_train, y_train)

# Fazendo previsões nos dados de teste
y_pred = svm_model.predict(X_test)

"""# Avaliando o Modelo"""

cm = confusion_matrix(y_test, y_pred)
cm

# Calculando a Acurácia do Modelo
accuracy = accuracy_score(y_test, y_pred)
print('Acurácia: ',accuracy)

# Calculando a Precisão do Modelo
precision = precision_score(y_test, y_pred, average='macro')
print('Precisão: ',precision)

# Calculando o Recall do Modelo
recall = recall_score(y_test, y_pred, average='macro')
print('Recall: ',recall)

# Calculando o F1-Score do Modelo
f1 = f1_score(y_test, y_pred, average='macro')
print('F1-Score: ',f1)